#
# brief: Trigger checkpoint and print internal measurement information to report rom
# author: Fischer Johannes
# date: 2019-06-14
#

#
# Build
#

build { core init drivers/timer app/sheep_counter rtcr_init app/rtcr_trigger server/report_rom }

create_boot_directory


# Generate config
#

install_config {
<config verbose="no">
  <affinity-space width="1"/>
  <parent-provides>
    <service name="PD"/>
    <service name="CPU"/>
    <service name="ROM"/>
    <service name="RM"/>
    <service name="LOG"/>
    <service name="IO_MEM"/>
    <service name="IO_PORT"/>
    <service name="IRQ"/>
  </parent-provides>

  <default-route>
    <service name="Timer"> <child name="timer"/> </service> 
    <any-service> <parent/> <any-child/> </any-service>	
  </default-route>

  <default caps="50"/>

  <start name="timer">
    <resource name="RAM" quantum="1M"/>
    <provides>
      <service name="Timer"/>
    </provides>
  </start>

	<start name="report_rom">
		<resource name="RAM" quantum="2M"/>
		<provides> <service name="ROM"/> <service name="Report"/> </provides>
		<config verbose="yes">
			<policy label="rtcr_trigger -> rtcr_state"  report="rtcr_init -> rtcr_state"/>
		</config>
	</start>
	
  <start name="rtcr_trigger" caps="1000">
    <resource name="RAM" quantum="50M"/>
	<route>
      <service name="Timer"> <child name="timer"/> </service>
      <any-service> <parent/> <any-child/> </any-service>	
	</route>
  </start>

  <start name="rtcr_init" caps="5000">
    <resource name="RAM" quantum="50M"/>    
    <provides>
      <service name="Report"/>
      <service name="Timer"/>
      <service name="PD"/>
      <service name="CPU"/>
      <service name="ROM"/>
      <service name="RM"/>
      <service name="LOG"/>
      <service name="Rtcr"/>
    </provides>
    <route>
      <service name="Timer"> <child name="timer"/> </service> 
      <service name="Report"> <child name="report_rom"/> </service>
      <service name="ROM" label="rtcr_state"> <child name="report_rom"/> </service>
      <any-service> <parent/> </any-service>
    </route>
    <config verbose="yes">
      <reporter rtcr="true"/>
      <parent-provides>
	<service name="PD"/>
	<service name="CPU"/>
	<service name="ROM"/>
	<service name="RM"/>
	<service name="LOG"/>
	<service name="IO_MEM"/>
	<service name="IO_PORT"/>
	<service name="IRQ"/>
        <service name="Timer"/>
      </parent-provides>
      <start name="sheep_counter" caps="100">
     	<resource name="RAM" quantum="1M"/>
        <route>
	  <service name="Timer"> <rtcr label="sheep_counter"/> </service> 
	  <service name="ROM">  <parent/> </service>
	  <any-service> <rtcr/> </any-service>
       	</route>
      </start>
      <module name="base"/>
      <checkpoint parallel="false"/>
      <checkpointable name="cpu_session" xpos="0" />
      <checkpointable name="pd_session" xpos="0" />    
      <checkpointable name="ram_dataspaces" xpos="0" />    
      <checkpointable name="rm_session" xpos="0" />    
      <checkpointable name="rom_session" xpos="0" />    
      <checkpointable name="log_session" xpos="0" />    
      <checkpointable name="timer_session" xpos="0" />    
      <checkpointable name="capability_mapping" xpos="0" />    
    </config>
  </start>
</config>
}


#
# Boot image
#

build_boot_image {
core
ld.lib.so
init
rtcr_init
timer
report_rom
rtcr_trigger
sheep_counter
libc.lib.so
pthread.lib.so
stdcxx.lib.so
libm.lib.so
libprotobuf.lib.so
zlib.lib.so
}


append qemu_args " -nographic -smp 2,cores=2 "

run_genode_until "test completed.*\n" 60
